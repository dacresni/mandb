mdoc warning: Extraneous .Ef (#56)
GETTIMEOFDAY(2) 	    BSD System Calls Manual	       GETTIMEOFDAY(2)

NAME
     gettimeofday, settimeofday -- get/set date and time

SYNOPSIS
     #include <sys/time.h>

     int
     gettimeofday(struct timeval *restrict tp, void *restrict tzp);

     int
     settimeofday(const struct timeval *tp, const struct timezone *tzp);

DESCRIPTION
     The system's notion of the current Greenwich time and the current time
     zone is obtained with the gettimeofday() call, and set with the
     settimeofday() call.  The time is expressed in seconds and microseconds
     since midnight (0 hour), January 1, 1970.	The resolution of the system
     clock is hardware dependent, and the time may be updated continuously or
     in ``ticks.''  If tp is NULL and tzp is non-NULL, gettimeofday() will
     populate the timezone struct in tzp.  If tp is non-NULL and tzp is NULL,
     then only the timeval struct in tp is populated. If both tp and tzp are
     NULL, nothing is returned.

     The structures pointed to by tp and tzp are defined in <sys/time.h> as:

     struct timeval {
	     time_t	  tv_sec;   /* seconds since Jan. 1, 1970 */
	     suseconds_t  tv_usec;  /* and microseconds */
     };

     struct timezone {
	     int     tz_minuteswest; /* of Greenwich */
	     int     tz_dsttime;     /* type of dst correction to apply */
     };


     The timeval structure specifies a time value in seconds and microseconds.
     The values in timeval are opaque types whose length may vary on different
     machines; depending on them to have any given length may lead to errors.

     The timezone structure indicates the local time zone (measured in minutes
     of time westward from Greenwich), and a flag that, if nonzero, indicates
     that Daylight Saving time applies locally during the appropriate part of
     the year.

     Only the super-user may set the time of day or time zone.	If the system
     securelevel is greater than 1 (see init(8) ), the time may only be
     advanced.	This limitation is imposed to prevent a malicious super-user
     from setting arbitrary time stamps on files.  The system time can still
     be adjusted backwards using the adjtime(2) system call even when the sys-
     tem is secure.

RETURN
     A 0 return value indicates that the call succeeded.  A -1 return value
     indicates an error occurred, and in this case an error code is stored
     into the global variable errno.

ERRORS
     The following error codes may be set in errno:

     [EFAULT]  An argument address referenced invalid memory.

     [EPERM]   A user other than the super-user attempted to set the time.

LEGACY SYNOPSIS
     #include <sys/time.h>

     int
     gettimeofday(struct timeval *tp, struct timezone *tzp);

     The type of tzp has changed.

SEE ALSO
     date(1), adjtime(2), ctime(3), compat(5), timed(8)

HISTORY
     The gettimeofday() function call appeared in 4.2BSD.

4th Berkeley Distribution	August 5, 2008	     4th Berkeley Distribution
