CHMOD(2)		    BSD System Calls Manual		      CHMOD(2)

NAME
     chmod, fchmod -- change mode of file

SYNOPSIS
     #include <sys/types.h>
     #include <sys/stat.h>

     int
     chmod(const char *path, mode_t mode);

     int
     fchmod(int fildes, mode_t mode);

DESCRIPTION
     The function chmod() sets the file permission bits of the file specified
     by the pathname path to mode.  Fchmod() sets the permission bits of the
     specified file descriptor fildes.	Chmod() verifies that the process
     owner (user) either owns the file specified by path (or fildes), or is
     the super-user.  A mode is created from or'd permission bit masks defined
     in <sys/stat.h>:
	   #define S_IRWXU 0000700    /* RWX mask for owner */
	   #define S_IRUSR 0000400    /* R for owner */
	   #define S_IWUSR 0000200    /* W for owner */
	   #define S_IXUSR 0000100    /* X for owner */

	   #define S_IRWXG 0000070    /* RWX mask for group */
	   #define S_IRGRP 0000040    /* R for group */
	   #define S_IWGRP 0000020    /* W for group */
	   #define S_IXGRP 0000010    /* X for group */

	   #define S_IRWXO 0000007    /* RWX mask for other */
	   #define S_IROTH 0000004    /* R for other */
	   #define S_IWOTH 0000002    /* W for other */
	   #define S_IXOTH 0000001    /* X for other */

	   #define S_ISUID 0004000    /* set user id on execution */
	   #define S_ISGID 0002000    /* set group id on execution */
	   #define S_ISVTX 0001000    /* save swapped text even after use */

     The ISVTX (the sticky bit) indicates to the system which executable files
     are shareable (the default) and the system maintains the program text of
     the files in the swap area. The sticky bit may only be set by the super
     user on shareable executable files.

     If mode ISVTX (the `sticky bit') is set on a directory, an unprivileged
     user may not delete or rename files of other users in that directory. The
     sticky bit may be set by any user on a directory which the user owns or
     has appropriate permissions.  For more details of the properties of the
     sticky bit, see sticky(8).

     Writing or changing the owner of a file turns off the set-user-id and
     set-group-id bits unless the user is the super-user.  This makes the sys-
     tem somewhat more secure by protecting set-user-id (set-group-id) files
     from remaining set-user-id (set-group-id) if they are modified, at the
     expense of a degree of compatibility.

RETURN VALUES
     Upon successful completion, a value of 0 is returned.  Otherwise, a value
     of -1 is returned and errno is set to indicate the error.

ERRORS
     The chmod() system call will fail and the file mode will be unchanged if:

     [EACCES]		Search permission is denied for a component of the
			path prefix.

     [EFAULT]		Path points outside the process's allocated address
			space.

     [EINTR]		Its execution was interrupted by a signal.

     [EIO]		An I/O error occurred while reading from or writing to
			the file system.

     [ELOOP]		Too many symbolic links were encountered in translat-
			ing the pathname.  This is taken to be indicative of a
			looping symbolic link.

     [ENAMETOOLONG]	A component of a pathname exceeded {NAME_MAX} charac-
			ters, or an entire path name exceeded {PATH_MAX} char-
			acters.

     [ENOENT]		The named file does not exist.

     [ENOTDIR]		A component of the path prefix is not a directory.

     [EPERM]		The effective user ID does not match the owner of the
			file and the effective user ID is not the super-user.

     [EROFS]		The named file resides on a read-only file system.

     fchmod() will fail if:

     [EBADF]		fildes is not a valid file descriptor.

     [EINVAL]		fildes refers to a socket, not to a file.

     [EINVAL]		mode is not a valid file mode.

     [EINTR]		Its execution was interrupted by a signal.

     [EIO]		An I/O error occurred while reading from or writing to
			the file system.

     [EPERM]		The effective user ID does not match the owner of the
			file and the effective user ID is not the super-user.

     [EROFS]		The file resides on a read-only file system.

LEGACY SYNOPSIS
     #include <sys/types.h>
     #include <sys/stat.h>

     The include file <sys/types.h> is necessary.

SEE ALSO
     chmod(1), chown(2), open(2), stat(2), compat(5), sticky(8)

STANDARDS
     The chmod() function is expected to conform to IEEE Std 1003.1-1988
     (``POSIX.1'').

HISTORY
     The fchmod() function call appeared in 4.2BSD.

4th Berkeley Distribution	 June 4, 1993	     4th Berkeley Distribution
