AIO_READ(2)		    BSD System Calls Manual		   AIO_READ(2)

NAME
     aio_read -- asynchronous read from a file (REALTIME)

LIBRARY
     Standard C Library (libc, -lc)

SYNOPSIS
     #include <aio.h>

     int
     aio_read(struct aiocb *aiocbp);

DESCRIPTION
     The aio_read() system call allows the calling process to read
     aiocbp->aio_nbytes from the descriptor aiocbp->aio_fildes, beginning at
     the offset aiocbp->aio_offset, into the buffer pointed to by
     aiocbp->aio_buf.  The call returns immediately after the read request has
     been enqueued to the descriptor; the read may or may not have completed
     at the time the call returns.

     If _POSIX_PRIORITIZED_IO is defined, and the descriptor supports it, then
     the enqueued operation is submitted at a priority equal to that of the
     calling process minus aiocbp->aio_reqprio.

     The aiocbp->aio_lio_opcode argument is ignored by the aio_read() system
     call.

     The aiocbp pointer may be subsequently used as an argument to
     aio_return() and aio_error() in order to determine return or error status
     for the enqueued operation while it is in progress.

     If the request could not be enqueued (generally due to invalid argu-
     ments), then the call returns without having enqueued the request.

     If the request is successfully enqueued, the value of aiocbp->aio_offset
     can be modified during the request as context, so this value must not be
     referenced after the request is enqueued.

RESTRICTIONS
     The Asynchronous I/O Control Block structure pointed to by aiocbp and the
     buffer that the aiocbp->aio_buf member of that structure references must
     remain valid until the operation has completed.  For this reason, use of
     auto (stack) variables for these objects is discouraged.

     The asynchronous I/O control buffer aiocbp should be zeroed before the
     aio_read() call to avoid passing bogus context information to the kernel.

     Modifications of the Asynchronous I/O Control Block structure or the
     buffer contents after the request has been enqueued, but before the
     request has completed, are not allowed.

     If the file offset in aiocbp->aio_offset is past the offset maximum  for
     aiocbp->aio_fildes, no I/O will occur.

RETURN VALUES
     The aio_read() function returns the value 0 if successful; otherwise the
     value -1 is returned and the global variable errno is set to indicate the
     error.

DIAGNOSTICS
     None.

ERRORS
     The aio_read() system call will fail if:

     [EAGAIN]		Because of system resource limitations, the request
			was not queued.

     [ENOSYS]		The aio_read() system call is not supported.

     The following conditions may be synchronously detected when the
     aio_read() system call is made, or asynchronously, at any time there-
     after.  If they are detected at call time, aio_read() returns -1 and sets
     errno appropriately.  Otherwise, the aio_return() system call must be
     called.  It will return -1; aio_error() must then be called to determine
     the actual value that would have been returned in errno.

     [EBADF]		The aiocbp->aio_fildes argument is invalid.

     [EINVAL]		The offset aiocbp->aio_offset is not valid, the prior-
			ity specified by aiocbp->aio_reqprio is not a valid
			priority, or the number of bytes specified by
			aiocbp->aio_nbytes is not valid.

     [EOVERFLOW]	The file is a regular file, aiocbp->aio_nbytes is
			greater than zero, the starting offset in
			aiocbp->aio_offset is before the end of the file, but
			is at or beyond the aiocbp->aio_fildes offset maximum.

     If the request is successfully enqueued, but subsequently cancelled or an
     error occurs, the value returned by the aio_return() system call is per
     the read(2) system call, and the value returned by the aio_error() system
     call is either one of the error returns from the read(2) system call, or
     one of:

     [EBADF]		The aiocbp->aio_fildes argument is invalid for read-
			ing.

     [ECANCELED]	The request was explicitly cancelled via a call to
			aio_cancel().

     [EINVAL]		The offset aiocbp->aio_offset would be invalid.

SEE ALSO
     aio_cancel(2), aio_error(2), aio_return(2), aio_suspend(2), aio_write(2),
     aio(4)

STANDARDS
     The aio_read() system call is expected to conform to the IEEE Std 1003.1
     (``POSIX.1'') standard.

HISTORY
     The aio_read() system call first appeared in FreeBSD 3.0.

AUTHORS
     This manual page was written by Terry Lambert <terry@whistle.com>.

BUGS
     Invalid information in aiocbp->_aiocb_private may confuse the kernel.

BSD			       November 17, 1998			   BSD
