LINK(2) 		    BSD System Calls Manual		       LINK(2)

NAME
     link -- make a hard file link

SYNOPSIS
     #include <unistd.h>

     int
     link(const char *path1, const char *path2);

DESCRIPTION
     The link() function call atomically creates the specified directory entry
     (hard link) path2 with the attributes of the underlying object pointed at
     by path1.	If the link is successful, the link count of the underlying
     object is incremented; path1 and path2 share equal access and rights to
     the underlying object.

     If path1 is removed, the file path2 is not deleted and the link count of
     the underlying object is decremented.

     In order for the system call to succeed, path1 must exist and both path1
     and path2 must be in the same file system.  As mandated by POSIX.1, path1
     may not be a directory.

     link() will resolve and follow symbolic links contained within both path1
     and path2.  If the last component of path1 is a symbolic link, link()
     will point the hard link, path2, to the underlying object pointed to by
     path1, not to the symbolic link itself.

RETURN VALUES
     Upon successful completion, a value of 0 is returned.  Otherwise, a value
     of -1 is returned and errno is set to indicate the error.

ERRORS
     Link() will fail and no link will be created if:

     [EACCES]		A component of either path prefix denies search per-
			mission.

     [EACCES]		The requested link requires writing in a directory
			with a mode that denies write permission.

     [EACCES]		The current process cannot access the existing file.

     [EDQUOT]		The directory in which the entry for the new link is
			being placed cannot be extended because the user's
			quota of disk blocks on the file system containing the
			directory has been exhausted.

     [EEXIST]		The link named by path2 already exists.

     [EFAULT]		One of the pathnames specified is outside the
			process's allocated address space.

     [EIO]		An I/O error occurs while reading from or writing to
			the file system to make the directory entry.

     [ELOOP]		Too many symbolic links are encountered in translating
			one of the pathnames.  This is taken to be indicative
			of a looping symbolic link.

     [EMLINK]		The file already has {LINK_MAX} links.

     [ENAMETOOLONG]	A component of a pathname exceeds {NAME_MAX} charac-
			ters, or an entire path name exceeded {PATH_MAX} char-
			acters.

     [ENOENT]		A component of either path prefix does not exist, or
			is a dangling symbolic link.

     [ENOENT]		The file named by path1 does not exist, or is a dan-
			gling symbolic link.

     [ENOSPC]		The directory in which the entry for the new link is
			being placed cannot be extended because there is no
			space left on the file system containing the direc-
			tory.

     [ENOTDIR]		A component of either path prefix is not a directory.

     [EPERM]		The file named by path1 is a directory.

     [EROFS]		The requested link requires writing in a directory on
			a read-only file system.

     [EXDEV]		The link named by path2 and the file named by path1
			are on different file systems.

SEE ALSO
     symlink(2), unlink(2)

STANDARDS
     The link() function is expected to conform to IEEE Std 1003.1-1988
     (``POSIX.1'').

4th Berkeley Distribution      October 29, 2008      4th Berkeley Distribution
