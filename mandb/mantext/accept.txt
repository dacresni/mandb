ACCEPT(2)		    BSD System Calls Manual		     ACCEPT(2)

NAME
     accept -- accept a connection on a socket

SYNOPSIS
     #include <sys/socket.h>

     int
     accept(int socket, struct sockaddr *restrict address,
	 socklen_t *restrict address_len);

DESCRIPTION
     The argument socket is a socket that has been created with socket(2),
     bound to an address with bind(2), and is listening for connections after
     a listen(2).  accept() extracts the first connection request on the queue
     of pending connections, creates a new socket with the same properties of
     socket, and allocates a new file descriptor for the socket.  If no pend-
     ing connections are present on the queue, and the socket is not marked as
     non-blocking, accept() blocks the caller until a connection is present.
     If the socket is marked non-blocking and no pending connections are
     present on the queue, accept() returns an error as described below.  The
     accepted socket may not be used to accept more connections.  The original
     socket socket, remains open.

     The argument address is a result parameter that is filled in with the
     address of the connecting entity, as known to the communications layer.
     The exact format of the address parameter is determined by the domain in
     which the communication is occurring.  The address_len is a value-result
     parameter; it should initially contain the amount of space pointed to by
     address; on return it will contain the actual length (in bytes) of the
     address returned.	This call is used with connection-based socket types,
     currently with SOCK_STREAM.

     It is possible to select(2) a socket for the purposes of doing an
     accept() by selecting it for read.

     For certain protocols which require an explicit confirmation, such as ISO
     or DATAKIT, accept() can be thought of as merely dequeuing the next con-
     nection request and not implying confirmation.  Confirmation can be
     implied by a normal read or write on the new file descriptor, and rejec-
     tion can be implied by closing the new socket.

     One can obtain user connection request data without confirming the con-
     nection by issuing a recvmsg(2) call with an msg_iovlen of 0 and a non-
     zero msg_controllen, or by issuing a getsockopt(2) request.  Similarly,
     one can provide user connection rejection information by issuing a
     sendmsg(2) call with providing only the control information, or by call-
     ing setsockopt(2).

RETURN VALUES
     The call returns -1 on error and the global variable errno is set to
     indicate the error.  If it succeeds, it returns a non-negative integer
     that is a descriptor for the accepted socket.

ERRORS
     The accept() system call will fail if:

     [EBADF]		socket is not a valid file descriptor.

     [ECONNABORTED]	The connection to socket has been aborted.

     [EFAULT]		The address parameter is not in a writable part of the
			user address space.

     [EINTR]		The accept() system call was terminated by a signal.

     [EINVAL]		socket is unwilling to accept connections.

     [EMFILE]		The per-process descriptor table is full.

     [ENFILE]		The system file table is full.

     [ENOMEM]		Insufficient memory was available to complete the
			operation.

     [ENOTSOCK] 	socket references a file type other than a socket.

     [EOPNOTSUPP]	socket is not of type SOCK_STREAM and thus does not
			accept connections.

     [EWOULDBLOCK]	socket is marked as non-blocking and no connections
			are present to be accepted.

LEGACY SYNOPSIS
     #include <sys/types.h>
     #include <sys/socket.h>

     The include file <sys/types.h> is necessary.

SEE ALSO
     bind(2), connect(2), listen(2), select(2), socket(2), compat(5)

HISTORY
     The accept() function appeared in 4.2BSD.

4.2 Berkeley Distribution      December 11, 1993     4.2 Berkeley Distribution
