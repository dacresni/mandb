SIGACTION(2)		    BSD System Calls Manual		  SIGACTION(2)

NAME
     sigaction -- software signal facilities

LIBRARY
     Standard C Library (libc, -lc)

SYNOPSIS
     #include <signal.h>


     struct  sigaction {
	     union __sigaction_u __sigaction_u;  /* signal handler */
	     sigset_t sa_mask;		     /* signal mask to apply */
	     int     sa_flags;		     /* see signal options below */
     };

     union __sigaction_u {
	     void    (*__sa_handler)(int);
	     void    (*__sa_sigaction)(int, struct __siginfo *,
			    void *);
     };

     #define sa_handler      __sigaction_u.__sa_handler
     #define sa_sigaction    __sigaction_u.__sa_sigaction


     int
     sigaction(int sig, const struct sigaction *restrict act,
	 struct sigaction *restrict oact);

DESCRIPTION
     The system defines a set of signals that may be delivered to a process.
     Signal delivery resembles the occurrence of a hardware interrupt: the
     signal is normally blocked from further occurrence, the current process
     context is saved, and a new one is built.	A process may specify a
     handler to which a signal is delivered, or specify that a signal is to be
     ignored.  A process may also specify that a default action is to be taken
     by the system when a signal occurs.  A signal may also be blocked, in
     which case its delivery is postponed until it is unblocked.  The action
     to be taken on delivery is determined at the time of delivery.  Normally,
     signal handlers execute on the current stack of the process.  This may be
     changed, on a per-handler basis, so that signals are taken on a special
     signal stack.

     Signal routines normally execute with the signal that caused their invo-
     cation blocked, but other signals may yet occur.  A global signal mask
     defines the set of signals currently blocked from delivery to a process.
     The signal mask for a process is initialized from that of its parent
     (normally empty).	It may be changed with a sigprocmask(2) call, or when
     a signal is delivered to the process.

     When a signal condition arises for a process, the signal is added to a
     set of signals pending for the process.  If the signal is not currently
     blocked by the process then it is delivered to the process.  Signals may
     be delivered any time a process enters the operating system (e.g., during
     a system call, page fault or trap, or clock interrupt).  If multiple sig-
     nals are ready to be delivered at the same time, any signals that could
     be caused by traps are delivered first.  Additional signals may be pro-
     cessed at the same time, with each appearing to interrupt the handlers
     for the previous signals before their first instructions.	The set of
     pending signals is returned by the sigpending(2) system call.  When a
     caught signal is delivered, the current state of the process is saved, a
     new signal mask is calculated (as described below), and the signal han-
     dler is invoked.  The call to the handler is arranged so that if the sig-
     nal handling routine returns normally the process will resume execution
     in the context from before the signal's delivery.	If the process wishes
     to resume in a different context, then it must arrange to restore the
     previous context itself.

     When a signal is delivered to a process a new signal mask is installed
     for the duration of the process' signal handler (or until a
     sigprocmask(2) system call is made).  This mask is formed by taking the
     union of the current signal mask set, the signal to be delivered, and the
     signal mask associated with the handler to be invoked.

     The sigaction() system call assigns an action for a signal specified by
     sig.  If act is non-zero, it specifies an action (SIG_DFL, SIG_IGN, or a
     handler routine) and mask to be used when delivering the specified sig-
     nal.  If oact is non-zero, the previous handling information for the sig-
     nal is returned to the user.

     Once a signal handler is installed, it normally remains installed until
     another sigaction() system call is made, or an execve(2) is performed.  A
     signal-specific default action may be reset by setting sa_handler to
     SIG_DFL.  The defaults are process termination, possibly with core dump;
     no action; stopping the process; or continuing the process.  See the sig-
     nal list below for each signal's default action.  If sa_handler is
     SIG_DFL, the default action for the signal is to discard the signal, and
     if a signal is pending, the pending signal is discarded even if the sig-
     nal is masked.  If sa_handler is set to SIG_IGN current and pending
     instances of the signal are ignored and discarded.

     Options may be specified by setting sa_flags.  The meaning of the various
     bits is as follows:

	   SA_NOCLDSTOP    If this bit is set when installing a catching func-
			   tion for the SIGCHLD signal, the SIGCHLD signal
			   will be generated only when a child process exits,
			   not when a child process stops.

	   SA_NOCLDWAIT    If this bit is set when calling sigaction() for the
			   SIGCHLD signal, the system will not create zombie
			   processes when children of the calling process
			   exit.  If the calling process subsequently issues a
			   wait(2) (or equivalent), it blocks until all of the
			   calling process's child processes terminate, and
			   then returns a value of -1 with errno set to
			   ECHILD.

	   SA_ONSTACK	   If this bit is set, the system will deliver the
			   signal to the process on a signal stack, specified
			   with sigaltstack(2).

	   SA_NODEFER	   If this bit is set, further occurrences of the
			   delivered signal are not masked during the execu-
			   tion of the handler.

	   SA_RESETHAND    If this bit is set, the handler is reset back to
			   SIG_DFL at the moment the signal is delivered.

	   SA_RESTART	   See paragraph below.

	   SA_SIGINFO	   If this bit is set, the handler function is assumed
			   to be pointed to by the sa_sigaction member of
			   struct sigaction and should match the prototype
			   shown above or as below in EXAMPLES.  This bit
			   should not be set when assigning SIG_DFL or
			   SIG_IGN.

     If a signal is caught during the system calls listed below, the call may
     be forced to terminate with the error EINTR, the call may return with a
     data transfer shorter than requested, or the call may be restarted.
     Restart of pending calls is requested by setting the SA_RESTART bit in
     sa_flags.	The affected system calls include open(2), read(2), write(2),
     sendto(2), recvfrom(2), sendmsg(2) and recvmsg(2) on a communications
     channel or a slow device (such as a terminal, but not a regular file) and
     during a wait(2) or ioctl(2).  However, calls that have already committed
     are not restarted, but instead return a partial success (for example, a
     short read count).

     After a fork(2) or vfork(2) all signals, the signal mask, the signal
     stack, and the restart/interrupt flags are inherited by the child.

     The execve(2) system call reinstates the default action for all signals
     which were caught and resets all signals to be caught on the user stack.
     Ignored signals remain ignored; the signal mask remains the same; signals
     that restart pending system calls continue to do so.

     The following is a list of all signals with names as in the include file
     <signal.h>:

     NAME	     Default Action	     Description
     SIGHUP	     terminate process	     terminal line hangup
     SIGINT	     terminate process	     interrupt program
     SIGQUIT	     create core image	     quit program
     SIGILL	     create core image	     illegal instruction
     SIGTRAP	     create core image	     trace trap
     SIGABRT	     create core image	     abort(3) call (formerly SIGIOT)
     SIGEMT	     create core image	     emulate instruction executed
     SIGFPE	     create core image	     floating-point exception
     SIGKILL	     terminate process	     kill program
     SIGBUS	     create core image	     bus error
     SIGSEGV	     create core image	     segmentation violation
     SIGSYS	     create core image	     non-existent system call invoked
     SIGPIPE	     terminate process	     write on a pipe with no reader
     SIGALRM	     terminate process	     real-time timer expired
     SIGTERM	     terminate process	     software termination signal
     SIGURG	     discard signal	     urgent condition present on
					     socket
     SIGSTOP	     stop process	     stop (cannot be caught or
					     ignored)
     SIGTSTP	     stop process	     stop signal generated from
					     keyboard
     SIGCONT	     discard signal	     continue after stop
     SIGCHLD	     discard signal	     child status has changed
     SIGTTIN	     stop process	     background read attempted from
					     control terminal
     SIGTTOU	     stop process	     background write attempted to
					     control terminal
     SIGIO	     discard signal	     I/O is possible on a descriptor
					     (see fcntl(2))
     SIGXCPU	     terminate process	     cpu time limit exceeded (see
					     setrlimit(2))
     SIGXFSZ	     terminate process	     file size limit exceeded (see
					     setrlimit(2))
     SIGVTALRM	     terminate process	     virtual time alarm (see
					     setitimer(2))
     SIGPROF	     terminate process	     profiling timer alarm (see
					     setitimer(2))
     SIGWINCH	     discard signal	     Window size change
     SIGINFO	     discard signal	     status request from keyboard
     SIGUSR1	     terminate process	     User defined signal 1
     SIGUSR2	     terminate process	     User defined signal 2

NOTE
     The sa_mask field specified in act is not allowed to block SIGKILL or
     SIGSTOP.  Any attempt to do so will be silently ignored.

     The following functions are either reentrant or not interruptible by sig-
     nals and are async-signal safe.  Therefore applications may invoke them,
     without restriction, from signal-catching functions:

     Base Interfaces:

     _exit(), access(), alarm(), cfgetispeed(), cfgetospeed(), cfsetispeed(),
     cfsetospeed(), chdir(), chmod(), chown(), close(), creat(), dup(),
     dup2(), execle(), execve(), fcntl(), fork(), fpathconf(), fstat(),
     fsync(), getegid(), geteuid(), getgid(), getgroups(), getpgrp(),
     getpid(), getppid(), getuid(), kill(), link(), lseek(), mkdir(),
     mkfifo(), open(), pathconf(), pause(), pipe(), raise(), read(), rename(),
     rmdir(), setgid(), setpgid(), setsid(), setuid(), sigaction(),
     sigaddset(), sigdelset(), sigemptyset(), sigfillset(), sigismember(),
     signal(), sigpending(), sigprocmask(), sigsuspend(), sleep(), stat(),
     sysconf(), tcdrain(), tcflow(), tcflush(), tcgetattr(), tcgetpgrp(),
     tcsendbreak(), tcsetattr(), tcsetpgrp(), time(), times(), umask(),
     uname(), unlink(), utime(), wait(), waitpid(), write().

     Realtime Interfaces:

     aio_error(), sigpause(), aio_return(), aio_suspend(), sem_post(),
     sigset().

     ANSI C Interfaces:

     strcpy(), strcat(), strncpy(), strncat(), and perhaps some others.

     Extension Interfaces:

     strlcpy(), strlcat().

     All functions not in the above lists are considered to be unsafe with
     respect to signals.  That is to say, the behaviour of such functions when
     called from a signal handler is undefined.  In general though, signal
     handlers should do little more than set a flag; most other actions are
     not safe.

     Also, it is good practice to make a copy of the global variable errno and
     restore it before returning from the signal handler.  This protects
     against the side effect of errno being set by functions called from
     inside the signal handler.

RETURN VALUES
     The sigaction() function returns the value 0 if successful; otherwise the
     value -1 is returned and the global variable errno is set to indicate the
     error.

EXAMPLES
     There are three possible prototypes the handler may match:

	   ANSI C:
		  void handler(int);

	   POSIX SA_SIGINFO:
		  void handler(int, siginfo_t *info, ucontext_t *uap);

     The handler function should match the SA_SIGINFO prototype if the SA_SIG-
     INFO bit is set in flags.	It then should be pointed to by the
     sa_sigaction member of struct sigaction.  Note that you should not assign
     SIG_DFL or SIG_IGN this way.

     If the SA_SIGINFO flag is not set, the handler function should match
     either the ANSI C or traditional BSD prototype and be pointed to by the
     sa_handler member of struct sigaction.  In practice, FreeBSD always sends
     the three arguments of the latter and since the ANSI C prototype is a
     subset, both will work.  The sa_handler member declaration in FreeBSD
     include files is that of ANSI C (as required by POSIX), so a function
     pointer of a BSD-style function needs to be casted to compile without
     warning.  The traditional BSD style is not portable and since its capa-
     bilities are a full subset of a SA_SIGINFO handler, its use is depre-
     cated.

     The sig argument is the signal number, one of the SIG... values from
     <signal.h>.

     The code argument of the BSD-style handler and the si_code member of the
     info argument to a SA_SIGINFO handler contain a numeric code explaining
     the cause of the signal, usually one of the SI_... values from <sys/sig-
     nal.h> or codes specific to a signal, i.e. one of the FPE_... values for
     SIGFPE.

     The uap argument to a POSIX SA_SIGINFO handler points to an instance of
     ucontext_t.

ERRORS
     The sigaction() system call will fail and no new signal handler will be
     installed if one of the following occurs:

     [EFAULT]		Either act or oact points to memory that is not a
			valid part of the process address space.

     [EINVAL]		The sig argument is not a valid signal number.

     [EINVAL]		An attempt is made to ignore or supply a handler for
			SIGKILL or SIGSTOP.

     [EINVAL]		An attempt was made to set the action to SIG_DFL for a
			signal that cannot be caught or ignored (or both).

STANDARDS
     The sigaction() system call is expected to conform to ISO/IEC 9945-1:1990
     (``POSIX.1'').  The SA_ONSTACK and SA_RESTART flags are Berkeley exten-
     sions, as are the signals, SIGTRAP, SIGEMT, SIGBUS, SIGSYS, SIGURG,
     SIGIO, SIGXCPU, SIGXFSZ, SIGVTALRM, SIGPROF, SIGWINCH, and SIGINFO.
     Those signals are available on most BSD-derived systems.  The SA_NODEFER
     and SA_RESETHAND flags are intended for backwards compatibility with
     other operating systems.  The SA_NOCLDSTOP, and SA_NOCLDWAIT flags are
     featuring options commonly found in other operating systems.

SEE ALSO
     kill(1), kill(2), ptrace(2), sigaltstack(2), sigblock(2), sigpause(2),
     sigpending(2), sigprocmask(2), sigsetmask(2), sigsuspend(2), sigvec(2),
     wait(2), fpsetmask(3), setjmp(3), siginterrupt(3), sigsetops(3),
     ucontext(3), tty(4)

BSD			      September 18, 2008			   BSD
